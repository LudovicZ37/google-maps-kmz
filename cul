<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Carte des Zones de productions</title>
  <style>
    /* Style pour la carte */
    #map {
      height: 80vh; /* Par d√©faut, la carte occupe 80% de la hauteur */
      width: 100%;
      margin-top: 20px;
      margin-bottom: 20px;
      border: 4px solid white;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      transition: height 0.5s ease;
    }

    /* Style pour le conteneur Street View */
    #street-view {
      display: none;
      height: 30vh;
      width: 100%;
      border: 4px solid white;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      margin-bottom: 20px;
      position: relative;
    }

    /* Style pour le popup personnalis√© */
    #custom-popup {
      display: none;
      position: fixed;
      left: 50%;
      transform: translate(-50%, -50%);
      /*background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      z-index: 1001;
      text-align: center;
      font-family: Arial, sans-serif;
      font-size: 16px;
      /*color: #333;
      max-width: 300px;
      animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translate(-50%, -60%);
      }
      to {
        opacity: 1;
        transform: translate(-50%, -50%);
      }
    }
  </style>
</head>
<body>
  <header>
    <br /><br /><br />
    <h1>Carte des Zones de production de notre √©lectricit√©</h1>
    <h2>Visualisez l'offre disponible en fonction de votre adresse</h2>
  </header>

  <!-- Conteneur de recherche -->
  <div id="search-container">
    <br />
    <input type="text" id="address" placeholder="Entrez une adresse">
    <br /><br />
    <button id="search-button">Rechercher</button>
  </div>

  <!-- Carte -->
  <div id="map"></div>

  <!-- Street View -->
  <div id="street-view"></div>

  <!-- Pop-up personnalis√© -->
  <div id="custom-popup"></div>

  <script>
    // D√©finir les ic√¥nes avant leur utilisation
    let windTurbineIcon, hydroIcon;
    let searchMarker = null;

    function initIcons() {
      windTurbineIcon = {
        url: "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExamZuNHZ1aWdzM2lid3Jmc3AxMzRoaGswNTdlMnl4cTVjeDJkcjlmcSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/SQSxROvkJ74zEtzB0Q/giphy.gif",
        scaledSize: new google.maps.Size(50, 50),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(25, 25)
      };

      hydroIcon = {
        url: "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExNXcxdnN0c204bWlwODI4eWJ6YWRjOWQxOGk2MjJxbml6NDd0Y294OSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/1QnB1nACDFRuAvwjhj/giphy.gif",
        scaledSize: new google.maps.Size(70, 70),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(35, 35)
      };
    }

    let map, autocomplete, bounds;
    let polygons = [];

    // Couleurs du site Zephyr √ânergies Locales
    const zoneColors = {
      wind: "#1E90FF",
      hydro: "#32CD32"
    };

    function initMap() {
      initIcons();
      bounds = new google.maps.LatLngBounds();

      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 8,
        center: { lat: 47.394144, lng: 0.68484 },
        mapTypeId: 'terrain',
        streetViewControl: false,
        mapTypeControl: false,
        zoomControl: true,
        scaleControl: true,
        fullscreenControl: false,
        rotateControl: false,
        gestureHandling: "cooperative"
      });

      autocomplete = new google.maps.places.Autocomplete(document.getElementById('address'));
      autocomplete.addListener('place_changed', function () {
        let place = autocomplete.getPlace();
        if (!place.geometry) {
          alert("‚ö†Ô∏è L'adresse s√©lectionn√©e est invalide !");
          return;
        }
        handleAddress(place.geometry.location);
      });

      let kmlFiles = [
        { url: "https://zephyr-energieslocales.fr/wp-content/uploads/2025/02/MP_Ultra_Local.kml", name: "Parc du Moulin de Pierre", type: "wind" },
        { url: "https://zephyr-energieslocales.fr/wp-content/uploads/2025/02/BO_Ultra_Local.kml", name: "Parc de Bonneval", type: "wind" },
        { url: "https://zephyr-energieslocales.fr/wp-content/uploads/2025/02/RENA_Ultra_Local.kml", name: "Parc de la Renardi√®re", type: "wind" },
        { url: "https://zephyr-energieslocales.fr/wp-content/uploads/2025/02/HC_Ultra_Local.kml", name: "Parc de la Haute Ch√®vre", type: "wind" },
        { url: "https://zephyr-energieslocales.fr/wp-content/uploads/2025/02/SJ_Ultra_Local.kml", name: "Centrale Hydro Antoign√©", type: "hydro" },
        { url: "https://zephyr-energieslocales.fr/wp-content/uploads/2025/02/VO_Ultra_Local.kml", name: "Parc de la V√®nerie Ouest", type: "wind" }
      ];

      let loadCount = 0;

      kmlFiles.forEach(zone => {
        fetch(zone.url)
          .then(response => response.text())
          .then(data => {
            let parser = new DOMParser();
            let kml = parser.parseFromString(data, "text/xml");

            let coordinates = kml.getElementsByTagName("coordinates");
            if (coordinates.length === 0) return;

            let coordsArray = coordinates[0].textContent.trim().split(/\s+/).map(coord => {
              let [lng, lat] = coord.split(",").map(Number);
              return { lat, lng };
            });

            let polygon = new google.maps.Polygon({
              paths: coordsArray,
              strokeColor: zoneColors[zone.type],
              strokeOpacity: 0.8,
              strokeWeight: 2,
              fillColor: zoneColors[zone.type],
              fillOpacity: 0.35,
              map: map,
              parkName: zone.name,
              type: zone.type
            });

            polygon.addListener('click', function () {
              showPopup(`${polygon.parkName}`, { hideOnScroll: true, position: 'center' }, polygon.type);
            });

            polygons.push(polygon);

            let center = {
              lat: coordsArray.reduce((sum, p) => sum + p.lat, 0) / coordsArray.length,
              lng: coordsArray.reduce((sum, p) => sum + p.lng, 0) / coordsArray.length
            };

            let icon = zone.type === "hydro" ? hydroIcon : windTurbineIcon;
            let marker = new google.maps.Marker({
              position: center,
              map: map,
              icon: icon,
              parkName: zone.name,
              type: zone.type
            });

            marker.addListener('click', function () {
              showPopup(`${marker.parkName}`, { hideOnScroll: true, position: 'center' }, marker.type);
            });

            coordsArray.forEach(coord => bounds.extend(coord));

            loadCount++;
            if (loadCount === kmlFiles.length) {
              adjustMapView();
            }
          })
          .catch(error => {
            console.error(`‚ùå Erreur de chargement du fichier KML : ${zone.name}`, error);
          });
      });

      document.getElementById('search-button').addEventListener('click', function () {
        let address = document.getElementById('address').value;
        let geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'address': address }, function (results, status) {
          if (status === 'OK') {
            handleAddress(results[0].geometry.location);
          } else {
            alert('‚ö†Ô∏è Adresse non trouv√©e: ' + status);
          }
        });
      });

      google.maps.event.addListener(map, "click", function (event) {
        let clickedLocation = event.latLng;
        let foundPolygon = null;
        polygons.forEach(polygon => {
          if (google.maps.geometry.poly.containsLocation(clickedLocation, polygon)) {
            foundPolygon = polygon;
          }
        });
        if (foundPolygon) {
          showPopup(foundPolygon.parkName, { hideOnScroll: true, position: 'top' }, foundPolygon.type);
        }
      });
    }

    function adjustMapView() {
      if (!bounds.isEmpty()) {
        map.fitBounds(bounds);
      }
    }

    function handleAddress(location) {
      const mapContainer = document.getElementById("map");
      const streetViewContainer = document.getElementById("street-view");

      checkCountry(location).then(country => {
        if (country !== "France") {
          showPopup("üö´ Vous √™tes hors de France. La recherche n'est pas possible ici.");
          return;
        }

        const initialZoom = map.getZoom();
        const initialCenter = map.getCenter();
        const initialMapType = map.getMapTypeId();

        if (searchMarker) {
          searchMarker.setMap(null);
        }

        searchMarker = new google.maps.Marker({
          map: map,
          position: location
        });

        map.setCenter(location);
        mapContainer.scrollIntoView({ behavior: 'smooth' });

        let isInside = false;
        let parkName = "";

        polygons.forEach(polygon => {
          if (google.maps.geometry.poly.containsLocation(location, polygon)) {
            isInside = true;
            parkName = polygon.parkName;
          }
        });

        if (!isInside) {
          mapContainer.style.height = "90vh";
          streetViewContainer.style.display = "none";
          showPopup(`Vous b√©n√©ficiez du tarif <strong>Locale</strong> !`, { hideOnScroll: false, position: 'top' }, null);
          return;
        }

        // Si l'adresse est dans une zone, on commence par l'animation de zoom in
        const streetViewService = new google.maps.StreetViewService();
        let zoomLevel = map.getZoom();
        const targetZoom = 18;

        function smoothZoomIn() {
          if (zoomLevel < targetZoom) {
            zoomLevel++;
            map.setMapTypeId('roadmap');
            map.setZoom(zoomLevel);
            setTimeout(smoothZoomIn, 250);
          } else {
            // Zoom in termin√©, affichage du Street View
            streetViewService.getPanorama({ location: location, radius: 50 }, function (data, status) {
              if (status === "OK") {
                // Ajuster la hauteur et afficher le conteneur Street View
                mapContainer.style.height = "65vh";
                streetViewContainer.style.display = "block";
                // R√©cup√©rer la position exacte du panorama
                const panoramaLocation = data.location.latLng;
                // Cr√©er le panorama et l'associer au plan
                const streetViewPanorama = new google.maps.StreetViewPanorama(streetViewContainer, {
                  position: panoramaLocation,
                  pov: { heading: 165, pitch: 0 },
                  zoom: 1,
                  disableDefaultUI: true,
                  scrollwheel: false,
                  clickToGo: false,
                  linksControl: false,
                  zoomControl: false,
                  panControl: false
                });
                map.setStreetView(streetViewPanorama);
                
                // Vider le conteneur pour √©viter l'accumulation d'√©l√©ments
                streetViewContainer.innerHTML = "";
                
                // Afficher l'adresse exacte dans le panorama
                const geocoder = new google.maps.Geocoder();
                geocoder.geocode({ location: location }, (results, status) => {
                  if (status === "OK" && results[0]) {
                    const address = results[0].formatted_address;
                    const addressElement = document.createElement("div");
                    addressElement.style.position = "absolute";
                    addressElement.style.bottom = "10px";
                    addressElement.style.left = "10px";
                    addressElement.style.background = "white";
                    addressElement.style.padding = "10px";
                    addressElement.style.borderRadius = "5px";
                    addressElement.style.boxShadow = "0 2px 6px rgba(0, 0, 0, 0.3)";
                    addressElement.innerHTML = `<strong>Adresse :</strong> ${address}`;
                    streetViewContainer.appendChild(addressElement);
                  }
                });
                
                // Scroll vers la carte
                const offset = 250;
                window.scrollTo({ top: mapContainer.offsetTop + offset, behavior: 'smooth' });
              } else {
                console.error("Street View non disponible :", status);
              }
              // Apr√®s 1 seconde, lancer le zoom out
              setTimeout(smoothZoomOut, 1000);
            });
          }
        }

        function smoothZoomOut() {
          let backZoom = targetZoom;
          function zoomOutStep() {
            if (backZoom > initialZoom) {
              backZoom--;
              map.setZoom(backZoom);
              setTimeout(zoomOutStep, 200);
            } else {
              map.fitBounds(bounds);
              map.setMapTypeId(initialMapType);
              showPopup(`Vous b√©n√©ficiez du tarif <strong>Ultra Locale</strong> du ${parkName} !`, { hideOnScroll: false, position: 'top' }, null);
            }
          }
          zoomOutStep();
        }

        smoothZoomIn();

      }).catch(error => {
        console.error("‚ùå Erreur lors de la v√©rification du pays :", error);
      });
    }

    function checkCountry(location) {
      return new Promise((resolve, reject) => {
        const geocoder = new google.maps.Geocoder();
        geocoder.geocode({ location: location }, (results, status) => {
          if (status === "OK") {
            if (results[0]) {
              for (let component of results[0].address_components) {
                if (component.types.includes("country")) {
                  resolve(component.long_name);
                  return;
                }
              }
              reject("Pays non trouv√©");
            } else {
              reject("Aucun r√©sultat trouv√©");
            }
          } else {
            reject(`Erreur de g√©ocodage inverse : ${status}`);
          }
        });
      });
    }

    function showPopup(message, options = {}, type = null) {
      let popup = document.getElementById("custom-popup");
      let gifUrl = "";
      
      if (type === "wind") {
        gifUrl = "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExamZuNHZ1aWdzM2lid3Jmc3AxMzRoaGswNTdlMnl4cTVjeDJkcjlmcSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/SQSxROvkJ74zEtzB0Q/giphy.gif";
      } else if (type === "hydro") {
        gifUrl = "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExNXcxdnN0c204bWlwODI4eWJ6YWRjOWQxOGk2MjJxbml6NDd0Y294OSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/1QnB1nACDFRuAvwjhj/giphy.gif";
      }
      
      let content = "";
      if (gifUrl) {
        content = `
          <div style="text-align: center;">
            <img src="${gifUrl}" alt="GIF du parc" style="width: 50px; height: 50px; margin: 0 auto;">
            <p style="margin-top: 10px;">${message}</p>
          </div>
        `;
      } else {
        content = `<p>${message}</p>`;
      }
      
      popup.innerHTML = content;
      popup.style.display = "block";
      popup.style.position = "fixed";
      // Si l'option position est 'top', on positionne √† 30 % du haut, sinon au centre (50%)
      popup.style.top = options.position === 'top' ? '30%' : '50%';
      popup.style.left = "50%";
      popup.style.transform = "translate(-50%, -50%)";
      
      const timeoutId = setTimeout(() => {
        popup.style.display = "none";
      }, 5000);
      
      const hideOnScroll = options.hideOnScroll !== undefined ? options.hideOnScroll : false;
      
      if (hideOnScroll) {
        const hidePopupOnScroll = () => {
          popup.style.display = "none";
          clearTimeout(timeoutId);
          window.removeEventListener('scroll', hidePopupOnScroll);
        };
        window.addEventListener('scroll', hidePopupOnScroll);
      }
    }

    function loadGoogleMapsAPI() {
      fetch("https://zephyr-energieslocales.fr/wp-content/uploads/2025/02/Config.json")
        .then(response => response.json())
        .then(config => {
          const script = document.createElement('script');
          script.src = `https://maps.googleapis.com/maps/api/js?key=${config.googleMapsApiKey}&libraries=places,geometry&callback=initMap`;
          script.async = true;
          document.head.appendChild(script);
        })
        .catch(error => {
          console.error("‚ùå Erreur de chargement de la cl√© API :", error);
        });
    }

    loadGoogleMapsAPI();
  </script>
</body>
</html>
