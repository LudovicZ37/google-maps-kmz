import requests
import base64
from datetime import datetime

class WonderTurbineAnalytics:
    def __init__(self, username, password):
        self.base_url = "https://wonderv3.com"
        self.session_id = self._authenticate(username, password)
        self.headers = {
            "Content-Type": "application/json",
            "x-wv3-session-id": self.session_id
        }

    def _authenticate(self, username, password):
        """Authentification avec génération du session ID"""
        auth_url = f"{self.base_url}/gobl/_login"
        password_b64 = base64.b64encode(password.encode()).decode()
        
        response = requests.post(
            auth_url,
            headers={"x-wv3-session-id": "none"},
            json={
                "Username": username,
                "PasswordBase64": password_b64
            }
        )
        
        if response.status_code != 200:
            raise Exception("Échec d'authentification")
            
        return response.headers.get("x-wv3-session-id")

    def get_turbine_metrics(self, unit_id):
        """
        Récupère toutes les métriques disponibles d'une turbine
        Retourne un dictionnaire structuré avec toutes les données
        """
        metrics_url = f"{self.base_url}/gobl/realtime/rest/recent"
        params = {"UnitIds": [unit_id]}
        
        response = requests.post(
            metrics_url,
            headers=self.headers,
            json=params
        )
        
        if response.status_code != 200:
            return None
            
        data = response.json()
        
        # Structure des données techniques complètes
        return {
            "production": self._extract_production(data),
            "wind": self._extract_wind_data(data),
            "temperature": self._extract_temperatures(data),
            "orientation": self._extract_orientation(data),
            "status": self._extract_status(data)
        }

    def _extract_production(self, data):
        """Extrait toutes les données de production énergétique"""
        return {
            "instant_power_kw": data.get("ActivePower"),
            "daily_production_kwh": data.get("DailyProduction"),
            "monthly_production_kwh": data.get("MonthlyProduction"),
            "total_production_kwh": data.get("TotalProduction"),
            "power_factor": data.get("PowerFactor"),
            "reactive_power_kvar": data.get("ReactivePower")
        }

    def _extract_wind_data(self, data):
        """Extrait les données anémométriques"""
        return {
            "speed_mps": data.get("WindSpeed"),
            "direction_deg": data.get("WindDirection"),
            "max_gust_mps": data.get("WindGust"),
            "avg_speed_10min_mps": data.get("WindSpeedAverage10min"),
            "turbulence_intensity": data.get("TurbulenceIntensity")
        }

    def _extract_temperatures(self, data):
        """Extrait les températures critiques"""
        return {
            "bearing_temp_c": data.get("BearingTemperature"),
            "generator_temp_c": data.get("GeneratorTemperature"),
            "ambient_temp_c": data.get("AmbientTemperature"),
            "hydraulic_oil_temp_c": data.get("HydraulicOilTemperature")
        }

    def _extract_orientation(self, data):
        """Extrait les données d'orientation et de position"""
        return {
            "nacelle_position_deg": data.get("NacellePosition"),
            "blade_angle_deg": data.get("BladeAngle"),
            "yaw_angle_deg": data.get("YawAngle"),
            "azimuth_deg": data.get("Azimuth")
        }

    def _extract_status(self, data):
        """Extrait les statuts opérationnels"""
        return {
            "operational_status": data.get("OperationalState"),
            "error_code": data.get("ErrorCode"),
            "maintenance_mode": data.get("MaintenanceMode"),
            "uptime_hours": data.get("TotalOperatingHours"),
            "vibration_level": data.get("VibrationLevel")
        }

    def get_historical_data(self, unit_id, start_time, end_time):
        """
        Récupère les données historiques complètes
        Format des dates: datetime.datetime
        """
        historical_url = f"{self.base_url}/gobl/base/rest/status/alarmlog"
        
        params = {
            "UnitIds": [unit_id],
            "From": self._datetime_to_microseconds(start_time),
            "Until": self._datetime_to_microseconds(end_time),
            "IncludeComponents": True,
            "IncludeLoss": True
        }
        
        response = requests.post(
            historical_url,
            headers=self.headers,
            json=params
        )
        
        return response.json() if response.status_code == 200 else None

    @staticmethod
    def _datetime_to_microseconds(dt):
        """Convertit un datetime en timestamp microsecondes"""
        return int(dt.timestamp() * 1e6)

# Exemple d'utilisation
if __name__ == "__main__":
    # Configuration
    USERNAME = "votre_identifiant"
    PASSWORD = "votre_mot_de_passe"
    TURBINE_ID = 12345  # Remplacer par l'ID réel

    # Initialisation
    analyzer = WonderTurbineAnalytics(USERNAME, PASSWORD)

    # Récupération des données en temps réel
    metrics = analyzer.get_turbine_metrics(TURBINE_ID)
    
    if metrics:
        print("=== Données de production ===")
        print(f"Production instantanée : {metrics['production']['instant_power_kw']} kW")
        print(f"Production totale : {metrics['production']['total_production_kwh']} kWh\n")
        
        print("=== Données éoliennes ===")
        print(f"Vitesse vent : {metrics['wind']['speed_mps']} m/s")
        print(f"Direction vent : {metrics['wind']['direction_deg']}°\n")
        
        print("=== Températures ===")
        print(f"Température générateur : {metrics['temperature']['generator_temp_c']}°C\n")
        
        print("=== Orientation ===")
        print(f"Position nacelle : {metrics['orientation']['nacelle_position_deg']}°\n")
        
        print("=== Statut ===")
        print(f"Disponibilité : {metrics['status']['uptime_hours']} heures")

    # Récupération des données historiques
    start_date = datetime(2024, 1, 1)
    end_date = datetime(2024, 1, 31)
    history = analyzer.get_historical_data(TURBINE_ID, start_date, end_date)
    
    if history:
        print(f"\nNombre d'événements historiques : {len(history)}")